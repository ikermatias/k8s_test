#!/bin/bash

currentPath=`pwd`
nameFileConfig="config.txt" #Name of config file that contains configurations parameters
nameFileLogs="logs.logs" #Name of file logs generated by launcher
catConfig="cat ${currentPath}/${nameFileConfig}" #simple cat for config file, it easier the task
log="tee -a ${nameFileLogs}"

#This method extract (format) an value in config.txt
extract_value_parameter(){

    value=`${catConfig} | grep $1 | awk -F " = " '{print $2}'`
    echo $value

}


log() {

    tee -a ${nameFileLogs} 
    
}

#Method: Make build and test
#Objetive: Build the new code changes and run the unit test
#DescriptiÃ³n: The method run a temporal docker image where build the new code of REST and test with Pytest.
make_build_and_test(){

    echo "---- Making build and Test ---" | $log
    
    resultBuildAndTest=`docker run -v $currentPath/hello-world-python-code:/app -w=/app --rm --name=srvtest python:alpine3.12 /bin/sh -c "pip install -r requirements_dev.txt; pytest -v"`

    echo $resultBuildAndTest | $log

    #If the occurencies of word "FAILED is greather than 0 the test not passed"
    resultTest=$(echo $resultBuildAndTest | grep -c FAILED)

    if [[ $resultTest -gt 0 ]]
    then
        echo "---------TEST FAILED---------------"
        exit;
    else 
        echo "---------TEST APPROVED---------------"
        echo $resultTest
    fi
}

#Method: Package
#Objetive: Build a new docker imagen with new code changes and push in docker hub
package(){

    echo "---- Making packaging ---" | $log

    
    docker build -t $docker_hub_repo/$image:$tag $currentPath/hello-world-python-code
    docker login
    docker push $docker_hub_repo/$image:$tag

}

#Method: Deploy
#Objetive: Deploy on Kubernetes the new image that was upload to docker hub repo.
deploy(){

    echo "---- Deploying on Kubernetes ---" | $log
    previousImage=$(cat $currentPath/hello-world-python/values.yaml | grep "image")
    nextImage="$docker_hub_repo/$image:$tag"
    echo ===========
    echo $nextImage

    echo "==> Replacing old image:${previousImage} with new image:${nextImage} in values.yml " | $log
    sed -i "/.*image:*/c\image: $nextImage" $currentPath/hello-world-python/values.yaml
    
    #if grep -c "name" give a number different of 0 this want said that the release exist then is needed upgrade else install
    validateHelmService=`helm get $image | grep -c "name"`
    echo $validateHelmService

    if [ $validateHelmService -gt 0 ]
    then
    helm upgrade $image $currentPath/hello-world-python
    else
    helm install --name $image $currentPath/hello-world-python 

    fi
}

smoke_test(){
    echo "coming soon | the pipeline have finished successfuly"
}


docker_hub_repo=$(extract_value_parameter docker_hub_repo)
image=$(extract_value_parameter name_image)
tag=$(extract_value_parameter tag_image)
versionLauncher="$(extract_value_parameter launcher_version)"

echo "==============================================="
echo "Pipeline Launcher version: ${versionLauncher}"
echo "Docker hub repo: $docker_hub_repo"
echo "image: ${image}:${tag}"
echo "By JSGD"
echo "Made with <3"
echo "===============================================" | $log
echo ""
echo "`date +%d-%m-%Y" "%H:%M:%S`: Starting work new" | $log


    #Make build and Tests
    make_build_and_test
    #package service
    package
    #Deploy on kubernetes
    deploy
    #run smoke test 
    smoke_test
